name: Deploy K3s Production Cluster

on:
  push:
    branches: [ main ]
    paths:
      - 'terraform/**'
      - 'ansible/**'
      - 'scripts/**'
      - '.github/workflows/deploy.yml'
  workflow_dispatch:

env:
  TF_VERSION: '1.6.0'
  ANSIBLE_VERSION: '2.15.0'

jobs:
  deploy-infrastructure:
    name: Deploy Infrastructure
    runs-on: [self-hosted, linux, x64, k3s, hypervisor]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Setup Ansible
        run: |
          sudo apt update
          sudo apt install -y ansible ansible-lint

      - name: Clean up any existing VMs
        run: |
          echo "üßπ Cleaning up any existing VMs before deployment..."
          # Stop and undefine all k3s-production VMs
          for vm in $(virsh list --all --name | grep k3s-production || true); do
            echo "Stopping VM: $vm"
            virsh destroy $vm 2>/dev/null || true
            echo "Undefining VM: $vm"
            virsh undefine $vm --remove-all-storage 2>/dev/null || true
          done
          
          # Clean up any remaining volumes (but preserve base image)
          for vol in $(virsh vol-list --pool default | grep k3s-production | awk '{print $1}' || true); do
            echo "Removing volume: $vol"
            virsh vol-delete $vol --pool default 2>/dev/null || true
          done
          
          # Clean up pools and networks
          virsh pool-destroy k3s-production-pool 2>/dev/null || true
          virsh pool-undefine k3s-production-pool 2>/dev/null || true
          virsh net-destroy k3s-production-network 2>/dev/null || true
          virsh net-undefine k3s-production-network 2>/dev/null || true
          
          # Clean up directories
          rm -rf /var/lib/libvirt/images/k3s-production 2>/dev/null || true
          
          echo "‚úÖ VM cleanup completed"

      - name: Ensure base image exists
        run: |
          echo "üîç Checking for base Ubuntu image..."
          if [ ! -f "/var/lib/libvirt/images/ubuntu-24.04-server-cloudimg-amd64.img" ]; then
            echo "üì• Downloading base Ubuntu image..."
            cd /var/lib/libvirt/images
            sudo wget -O ubuntu-24.04-server-cloudimg-amd64.img https://cloud-images.ubuntu.com/releases/24.04/release/ubuntu-24.04-server-cloudimg-amd64.img
            echo "‚úÖ Base image downloaded"
          else
            echo "‚úÖ Base image already exists"
          fi

      - name: Terraform Init
        run: |
          cd terraform
          terraform init

      - name: Terraform Plan
        run: |
          cd terraform
          terraform plan -out=tfplan

      - name: Terraform Apply
        run: |
          cd terraform
          terraform apply -auto-approve tfplan

      - name: Generate Ansible Inventory
        run: |
          cd terraform
          terraform output -raw inventory > ../ansible/inventory.yml

  deploy-k3s:
    name: Deploy K3s Cluster
    needs: deploy-infrastructure
    runs-on: [self-hosted, linux, x64, k3s, hypervisor]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Ansible
        run: |
          sudo apt update
          sudo apt install -y ansible ansible-lint

      - name: Wait for VMs to be ready
        run: |
          cd ansible
          ansible all -i inventory.yml -m wait_for_connection -e "timeout=300"

      - name: Fix repository issues
        run: |
          cd ansible
          echo "üîß Fixing repository issues on VMs..."
          ansible all -i inventory.yml -m shell -a "rm -f /etc/apt/sources.list.d/helm-stable-debian.list" --become
          ansible all -i inventory.yml -m shell -a "apt-get update" --become

      - name: Deploy K3s
        run: |
          cd ansible
          ansible-playbook -i inventory.yml playbooks/install-k3s.yaml

      - name: Setup kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/

      - name: Get kubeconfig and validate cluster
        run: |
          # Get kubeconfig from first master node
          MASTER_IP="192.168.122.11"
          scp -o StrictHostKeyChecking=no ubuntu@$MASTER_IP:/etc/rancher/k3s/k3s.yaml ./kubeconfig
          sed -i "s/127.0.0.1/$MASTER_IP/g" kubeconfig
          export KUBECONFIG=./kubeconfig
          
          # Validate cluster
          kubectl get nodes
          kubectl get pods -A

  notify:
    name: Notify Deployment Status
    needs: [deploy-k3s]
    runs-on: [self-hosted, linux, x64, k3s, hypervisor]
    if: always()
    steps:
      - name: Notify Success
        if: needs.deploy-k3s.result == 'success'
        run: |
          echo "‚úÖ K3s cluster deployed successfully!"
          echo "Cluster is ready for production workloads."

      - name: Notify Failure
        if: needs.deploy-k3s.result == 'failure'
        run: |
          echo "‚ùå K3s cluster deployment failed!"
          echo "Check the logs for details."
