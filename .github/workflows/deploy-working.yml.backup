name: Deploy K3s Cluster (Working)

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'development'
        type: choice
        options:
        - production
        - staging
        - development

env:
  TF_VERSION: '1.6.0'
  ANSIBLE_VERSION: '2.15.0'
  K3S_VERSION: 'v1.33.4+k3s1'
  CLUSTER_NAME: 'k3s-production'
  ENVIRONMENT: ${{ github.event.inputs.environment || 'development' }}

jobs:
  preflight:
    name: Preflight Checks
    runs-on: [self-hosted, libvirt, ubuntu-24.04]
    outputs:
      runner-valid: ${{ steps.preflight.result }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run preflight checks
        id: preflight
        run: |
          echo "üîç Running preflight checks..."
          ./scripts/preflight-checks.sh
          echo "runner-valid=true" >> $GITHUB_OUTPUT

  terraform_infra:
    name: Terraform Infrastructure
    needs: preflight
    runs-on: [self-hosted, libvirt, ubuntu-24.04]
    if: needs.preflight.outputs.runner-valid == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Init
      - name: Check existing VMs
        run: |
          echo "üîç Checking for existing VMs..."
          if virsh list --all | grep -q "k3s-"; then
            echo "‚ö†Ô∏è  Existing VMs found, destroying them first..."
            virsh list --all | grep "k3s-" | awk "{print $2}" | xargs -r virsh destroy
            virsh list --all | grep "k3s-" | awk "{print $2}" | xargs -r virsh undefine
            echo "‚úÖ Existing VMs destroyed"
          else
            echo "‚úÖ No existing VMs found"
          fi
        working-directory: terraform
        run: |
          terraform init

      - name: Terraform Apply
        working-directory: terraform
        run: |
          terraform apply -auto-approve

  ansible_k3s:
    name: Install K3s
    needs: [preflight, terraform_infra]
    runs-on: [self-hosted, libvirt, ubuntu-24.04]
    if: needs.preflight.outputs.runner-valid == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Ansible
        run: |
          sudo apt update
          sudo apt install -y ansible

      - name: Install K3s
        run: |
          ansible-playbook -i ansible/inventory.yml ansible/playbooks/install-k3s.yaml -v

  haproxy_setup:
    name: Setup HAProxy
    needs: [preflight, terraform_infra, ansible_k3s]
    runs-on: [self-hosted, libvirt, ubuntu-24.04]
    if: needs.preflight.outputs.runner-valid == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Ansible
        run: |
          sudo apt update
          sudo apt install -y ansible

      - name: Install HAProxy
        run: |
          ansible-playbook -i ansible/inventory.yml ansible/playbooks/install-haproxy.yaml -v

  ha_kubectl:
    name: Setup HA kubectl Access
    needs: [preflight, terraform_infra, ansible_k3s, haproxy_setup]
    runs-on: [self-hosted, libvirt, ubuntu-24.04]
    if: needs.preflight.outputs.runner-valid == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl

      - name: Setup Ansible
        run: |
          sudo apt update
          sudo apt install -y ansible

      - name: Setup HA kubectl
        run: |
          ansible-playbook -i ansible/inventory.yml ansible/playbooks/setup-ha-kubectl.yaml -v

  validate:
    name: Validate Cluster
    needs: [preflight, terraform_infra, ansible_k3s, haproxy_setup, ha_kubectl]
    runs-on: [self-hosted, libvirt, ubuntu-24.04]
    if: needs.preflight.outputs.runner-valid == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl

      - name: Download kubeconfig
        run: |
          ./scripts/fix-kubeconfig.sh

      - name: Validate cluster
        run: |
          kubectl get nodes
          kubectl get pods -A

  notify:
    name: Notify Completion
    needs: [preflight, terraform_infra, ansible_k3s, haproxy_setup, ha_kubectl, validate]
    runs-on: [self-hosted, libvirt, ubuntu-24.04]
    if: always()
    steps:
      - name: Notify completion
        run: |
          if [ "${{ needs.validate.result }}" == "success" ]; then
            echo "‚úÖ K3s cluster deployed successfully with HA kubectl access!"
            echo "Load Balancer 1: 192.168.122.41:6443"
            echo "Load Balancer 2: 192.168.122.42:6443"
            echo "Master 1: 192.168.122.11:6443"
            echo "Master 2: 192.168.122.12:6443"
            echo "Master 3: 192.168.122.13:6443"
          else
            echo "‚ùå K3s cluster deployment failed!"
          fi
